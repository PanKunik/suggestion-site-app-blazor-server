@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created.</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created.</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
        {
            FirstName = "Patrick",
            LastName = "Kunik",
            EmailAddress = "kunik@test.com",
            DisplayName = "Kunik Sample Display",
            ObjectIdentifier = "abc-123"
        };

        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication(user.ObjectIdentifier);
        var categories = await categoryData.GetCategories();
        var statuses = await statusData.GetStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[0],
            Suggestion = "Out first suggestion",
            Description = "This is suggestion created by the sample data generation method."
        };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[1],
            Suggestion = "Out second suggestion",
            Description = "This is suggestion created by the sample data generation method.",
            Status = statuses[0],
            OwnerNotes = "This is the note for status"
        };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[2],
            Suggestion = "Out third suggestion",
            Description = "This is suggestion created by the sample data generation method.",
            Status = statuses[1],
            OwnerNotes = "This is the note for status"
        };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[3],
            Suggestion = "Out fourth suggestion",
            Description = "This is suggestion created by the sample data generation method.",
            Status = statuses[2],
            UserVotes = votes,
            OwnerNotes = "This is the note for status"
        };

        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[4],
            Suggestion = "Out fifth suggestion",
            Description = "This is suggestion created by the sample data generation method.",
            Status = statuses[3],
            UserVotes = votes,
            OwnerNotes = "This is the note for status"
        };

        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel category = new()
        {
            Name = "Course",
            Description = "Full paid courses."
        };

        await categoryData.CreateCategory(category);

        category = new()
        {
            Name = "Dev Questions",
            Description = "Advice on being a developer."
        };

        await categoryData.CreateCategory(category);

        category = new()
        {
            Name = "In-Depth Tutorial",
            Description = "A deep-dive video on how to use a topin."
        };

        await categoryData.CreateCategory(category);

        category = new()
        {
            Name = "10-Minute Training",
            Description = "A quick \"How do I use this?\" video."
        };

        await categoryData.CreateCategory(category);

        category = new()
        {
            Name = "Other",
            Description = "Not sure which category this fits in."
        };

        await categoryData.CreateCategory(category);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel status = new()
        {
            Name = "Completed",
            Description = "The suggestion was accepted and the corresponding item was created."
        };

        await statusData.CreateStatus(status);

        status = new()
        {
            Name = "Watching",
            Description = "The suggestion is interesting. We are watching to see how much interest there is in it."
        };

        await statusData.CreateStatus(status);

        status = new()
        {
            Name = "Upcoming",
            Description = "The suggestion was accepted and it will be released soon."
        };

        await statusData.CreateStatus(status);

        status = new()
        {
            Name = "Dismissed",
            Description = "The suggestion was not something that we are going to undertake."
        };

        await statusData.CreateStatus(status);

        statusesCreated = true;
    }
}