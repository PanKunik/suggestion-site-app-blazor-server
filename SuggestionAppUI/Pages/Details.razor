@page "/Details/{Id}"

@inject AuthenticationStateProvider authProvider
@inject ISuggestionData suggestionData
@inject NavigationManager navigationManager
@inject IUserData userData
@inject IStatusData statusData

<h1 class="page-heading text-uppercase mb-4">Suggestion Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if(suggestion is not null)
        {
            <div class="row suggestion-detail-row">
                <div class="col-11 suggestion-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="(() => VoteUp())">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>
                        <div class="suggestion-detail-date">
                            <div>@suggestion.CreatedAt.ToString("MM.dd.yyyy")</div>
                        </div>
                    </div>
                    <div class="suggestion-detail-text">
                        <div class="fw-bold mb-2 suggestion-detail-suggestion">@suggestion.Suggestion</div>
                        <div class="mb-2 suggestion-detail-author">@suggestion.Author.DisplayName</div>
                        <div class="mb-2 d-none d-md-block">@suggestion.Description</div>
                        <div class="suggestion-entry-text-category d-none d-md-block">
                            @suggestion.Category.Name
                        </div>
                    </div>
                </div>
                <div class="col-1 close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
            </div>
            <div class="row d-block d-md-none">
                <div class="suggestion-detail-text">
                    <div>@suggestion.Description</div>
                    <div class="suggestion-entry-text-category">
                        @suggestion.Category.Name
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if(suggestion?.Status is not null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-g-10 suggestion-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                    @suggestion.Status.Name
                </div>
                <div class="suggestion-detail-owner-notes">
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}

@if (suggestion is not null)
{
    <AuthorizeView Policy="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details">
                <div>
                    <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                        Set Status
                    </div>
                    @if (string.IsNullOrWhiteSpace(settingStatus))
                    {
                        <div class="admin-set-statuses">
                            <button class="btn suggestion-entry-text-category btn-archive btn-status-completed"
                                    @onclick="@(() => settingStatus = "completed")">
                                Completed
                            </button>
                            <button class="btn suggestion-entry-text-category btn-archive btn-status-watching"
                                    @onclick="@(() => settingStatus = "watching")">
                                Watching
                            </button>
                            <button class="btn suggestion-entry-text-category btn-archive btn-status-upcoming"
                                    @onclick="@(() => settingStatus = "upcoming")">
                                Upcoming
                            </button>
                            <button class="btn suggestion-entry-text-category btn-archive btn-status-dismissed"
                                    @onclick="@(() => settingStatus = "dismissed")">
                                Dismissed
                            </button>
                        </div>
                    }
                    else if (settingStatus == "completed")
                    {
                        <div>
                            <input @bind="urlText" class="form-control rounded-control" type="text" 
                                    placeholder="Url" aria-label="Content Url" />
                        </div>
                        <div class="suggestion-entry-bottom">
                            <button class="btn btn-archive-confirm"
                                        @onclick="CompleteSetStatus">
                                    Confirm
                                </button>
                                <button class="btn btn-archive-reject"
                                        @onclick="(() => settingStatus = null)">
                                    Cancel
                                </button>
                        </div>
                    }
                    else
                    {
                        <div class="suggestion-entry-bottom">
                            <button class="btn btn-archive-confirm"
                                        @onclick="CompleteSetStatus">
                                    Confirm
                                </button>
                                <button class="btn btn-archive-reject"
                                        @onclick="(() => settingStatus = null)">
                                    Cancel
                                </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private SuggestionModel suggestion;
    private UserModel loggedInUser;

    private List<StatusModel> statuses;
    private string settingStatus = "";
    private string urlText = "";

    protected async override Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        statuses = await statusData.GetStatuses();
    }

    private async Task CompleteSetStatus()
    {
        switch (settingStatus)
        {
            case "completed":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                suggestion.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "You are right, this is an important topic for developers."
                                        + $"We created resource about it here: <a href='{urlText}' target='_blank'>{urlText}</a>";
                break;
            case "watching":
                suggestion.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "We noticed the interest this suggestion is getting! If more people"
                                        + "are interested we will address this topic in an upcoming resource.";
                break;
            case "upcoming":
                suggestion.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "Great suggestion! We have a resource in the pipeline to address this topic.";
                break;
            case "dismissed":
                suggestion.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "Sometimes a good idea doesn't fit within our scope and vision. This is one of those ideas.";
                break;
            default:
                return;
        }

        settingStatus = null;
        await suggestionData.UpdateSuggestion(suggestion);
    }

    private void ClosePage()
    {
        navigationManager.NavigateTo("/");
    }

    private string GetVoteClass()
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-detail-no-votes";
        }
        else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            return "suggestion-detail-voted";
        }
        else
        {
            return "suggestion-detail-not-voted";
        }
    }

    private string GetUpvoteTopText()
    {
        if(suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if(suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }

    private string GetUpvoteBottomText()
    {
        if(suggestion.UserVotes?.Count > 1)
            return "Upvotes";
        else
            return "Uptove";
    }
    private async Task VoteUp()
    {
        if(loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
            }
            
            if(suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            navigationManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetStatusClass()
    {
        if (suggestion is null || suggestion.Status is null)
        {
            return "suggestion-details-status-none";
        }

        string output = suggestion.Status.Name switch
        {
            "Completed" => "suggestion-detail-status-completed",
            "Watching" => "suggestion-detail-status-watching",
            "Upcoming" => "suggestion-detail-status-upcoming",
            "Dismissed" => "suggestion-detail-status-dismissed",
            _ => "suggestion-detail-status-none"
        };

        return output;
    }
}